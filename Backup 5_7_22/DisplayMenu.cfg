#Summary of items in this file over the "stock" / default menu config:
# Additional temps for TPU, PETG. 
# A Cooldown command
# Bed leveing options, which automatically homes the bed before it goes through the leveling procedure
# A "Shutdown" menu option which allows you to safely stop the Rasp Pi and can then turn the machine off.
# At the very bottom of the file I have disabled a bunch of menu items that I did not think were useful.

# If you want to change the order of menu items, adjust the "index" value which applies to whatever sub group those items are in.
# Below you can add additional temps easily using the examples provided. 

#Entries for PETG
[menu __main __temp __preheat_abs]
type: list
name: Preheat ABS
index:3

[menu __main __temp __preheat_pla]
type: list
name: Preheat PLA
index:4

[menu __main __temp __preheat_petg]
type: list
name: Preheat PETG
index:5

[menu __main __temp __preheat_petg __all]
type: command
enable: {('extruder' in printer) and ('heater_bed' in printer)}
name: Preheat all
gcode:
    M140 S80
    M104 S240

[menu __main __temp __preheat_petg __hotend]
type: command
enable: {'extruder' in printer}
name: Preheat hotend
gcode: M104 S240

[menu __main __temp __preheat_petg __hotbed]
type: command
enable: {'heater_bed' in printer}
name: Preheat hotbed
gcode: M140 S80

#Entries for TPU
[menu __main __temp __preheat_tpu]
type: list
name: Preheat TPU
index:6

[menu __main __temp __preheat_tpu __all]
type: command
enable: {('extruder' in printer) and ('heater_bed' in printer)}
name: Preheat all
gcode:
    M140 S60
    M104 S230

[menu __main __temp __preheat_tpu __hotend]
type: command
enable: {'extruder' in printer}
name: Preheat hotend
gcode: M104 S230

[menu __main __temp __preheat_tpu __hotbed]
type: command
enable: {'heater_bed' in printer}
name: Preheat hotbed
gcode: M140 S60

[menu __main __temp __cooldown]
type: command
name: Cooldown
index:7
gcode: 
    M140 S0
    M104 S0

#Bed Leveling Menu Item
[menu __main __bed_leveling]
type: list
enable: {not printer.idle_timeout.state == "Printing"}
name: Level Bed

#[menu __main __bed_leveling __preheat]
#type: command
#enable: extruder.is_enabled,heater_bed.is_enabled
#name: Preheat all
#gcode: 
#    M140 S60 
#    M104 S200

[menu __main __bed_leveling __home]
type: command
name: Home All
gcode: G28
#enable: {not printer.idle_timeout.state == "Printing"}


[menu __main __bed_leveling __start]
type: command
name: Start
#enable: {not printer.idle_timeout.state == "Printing"}
gcode: 
    G28
    BED_SCREWS_ADJUST

[menu __main __bed_leveling __accept]
type: command
name: Accept
#enable: {not printer.idle_timeout.state == "Printing"}
gcode: accept

[menu __main __bed_leveling __adjust]
type: command
name: Adjusted
#enable: {not printer.idle_timeout.state == "Printing"}
gcode: adjusted

#[menu __main __prepare __bed_leveling __abort_screws]
[menu __main __bed_leveling __abort_screws]
type: command
name: Abort
#enable: {not printer.idle_timeout.state == "Printing"}
gcode: abort

#Shutdown from: https://klipper.discourse.group/t/shutdown-command-to-the-raspberry/584/3
[delayed_gcode shutdown_machine]
gcode:
     {action_call_remote_method("shutdown_machine")}
initial_duration: 0.0
[menu __main __poweroff]
type: command
enable: {printer.idle_timeout.state != "Printing"}
name: Safely Shutdown
gcode:
     M117 Shutdown_RPI
     M118 Shutdown_RPI
     { menu.exit() }    
     UPDATE_DELAYED_GCODE ID=shutdown_machine DURATION=1 




#################################################
# LED
#################################################


#[menu __main __control __led]
#type: list
#name: LED
#enable: {printer.idle_timeout.state != "Printing"}
#index: 1

[menu __main __control __led_off]
type: command
name: LED Off
gcode:
 # SET_LED LED=caselight RED=0 GREEN=0 BLUE=0
    STOP_LED_EFFECTS STOP=1 FADETIME=1.0
index: 1


[menu __main __control __led_on]
type: command
name: LED On
gcode:
 # SET_LED LED=caselight RED=0.3 GREEN=0.3 BLUE=0.3
    SET_LED_EFFECT EFFECT=panel_idle FADETIME=1.0
    SET_LED_EFFECT EFFECT=bed_effects FADETIME=1.0
    SET_LED_EFFECT EFFECT=tool_effects FADETIME=1.0
index: 2

[menu __main __control __led_max]
type: command
name: LED MAX
gcode:
    SET_LED_EFFECT EFFECT=led_max FADETIME=1.0
index: 3


#################################################
# Nevermore
#################################################

#[menu __main __control __nevermore]
#type: list
#name: Nevermore
#enable: {printer.idle_timeout.state != "Printing"}
#index: 2

#[menu __main __control __nevermore __fan_on]
#type: command
#name: On
#gcode:
#  SET_FAN_SPEED FAN=Nevermore_Filter SPEED=1


#[menu __main __control __nevermore __fan_off]
#type: command
#name: Off
#gcode:
#  SET_FAN_SPEED FAN=Nevermore_Filter SPEED=0



## This is a simple include for the Nevermore. To use it with your printer, edit
## the pin definition in line 16 so it matches your printer.
## What you get:
## - a generic fan "Nevermore" which is adjustable in GCODE and in Mainsail/Fluidd
## - Commands in your 12864-controller to turn the fan on/off or adjust in 10%-steps
## - a Macro to turn the fan off some time after the print.
##
## Slicer integration: Add "SET_FAN_SPEED FAN=Nevermore SPEED=1" in your start-macro
## (or less fan depending on your needs, like SPEED=0.8)
## in your end print code, add "UPDATE_DELAYED_GCODE ID=filter_off DURATION=180"
## this keeps your Nevermore running for 180s after the print finishes to clean the chamber a bit more.



[menu __main __control __nevermoreonoff]
type: command
name: Nevermore {'ON' if printer['fan_generic Nevermore_Filter'].speed > 0 else 'OFF'}
enable: {'fan_generic Nevermore_Filter' in printer}
gcode:
    TOGGLE_NEVERMORE
index: 4

#name: Nevermore {'ON' if printer['OUTPUT_PIN PIN=Nevermore_Filter'].speed > 0 else 'OFF'}
#enable: {'OUTPUT_PIN PIN=Nevermore_Filter' in printer}


[menu __main __control __filterspeed]
type: input
enable: {'fan_generic Nevermore_Filter' in printer}
name: Filter %: {'%3d' % (menu.input*100)}%
input: {printer["fan_generic Nevermore_Filter"].speed}
input_min: 0
input_max: 1
input_step: 0.1
gcode:
    SET_FAN_SPEED FAN=Nevermore_Filter SPEED={menu.input}
index: 5

[delayed_gcode filter_off]
gcode:
    SET_FAN_SPEED FAN=Nevermore_Filter SPEED=0

[menu __main __control __zeroonoff]
type: command
name: ZeroFilter {'ON' if printer['fan_generic zerofilter'].speed > 0 else 'OFF'}
enable: {'fan_generic zerofilter' in printer}
gcode:
    TOGGLE_ZEROFILTER
index: 4

#name: Nevermore {'ON' if printer['OUTPUT_PIN PIN=Nevermore_Filter'].speed > 0 else 'OFF'}
#enable: {'OUTPUT_PIN PIN=Nevermore_Filter' in printer}


[menu __main __control __zerofilterspeed]
type: input
enable: {'fan_generic zerofilter' in printer}
name: Filter %: {'%3d' % (menu.input*100)}%
input: {printer["fan_generic zerofilter"].speed}
input_min: 0
input_max: 1
input_step: 0.1
gcode:
    SET_FAN_SPEED FAN=zerofilter SPEED={menu.input}
index: 5

[delayed_gcode filter_off]
gcode:
    SET_FAN_SPEED FAN=zerofilter SPEED=0





# Common parameters available for all menu config sections.
#[menu __some_list __some_name]
#type: disabled
#   Permanently disabled menu element, only required attribute is 'type'.
#   Allows you to easily disable/hide existing menu items.

#[menu some_name]
#type:
#   One of command, input, list, text:
#       command - basic menu element with various script triggers
#       input   - same like 'command' but has value changing capabilities.
#                 Press will start/stop edit mode.
#       list    - it allows for menu items to be grouped together in a
#                 scrollable list.  Add to the list by creating menu
#                 configurations using "some_list" as a prefix - for
#                 example: [menu some_list some_item_in_the_list]
#       vsdlist - same as 'list' but will append files from virtual sdcard
#                 (will be removed in the future)
#name:
#   Name of menu item - evaluated as a template.
#enable:
#   Template that evaluates to True or False.
#index:
#   Position where an item needs to be inserted in list. By default
#   the item is added at the end.

#[menu some_list]
#type: list
#name:
#enable:
#   See above for a description of these parameters.

#[menu some_list some_command]
#type: command
#name:
#enable:
#   See above for a description of these parameters.
#gcode:
#   Script to run on button click or long click. Evaluated as a
#   template.

#[menu some_list some_input]
#type: input
#name:
#enable:
#   See above for a description of these parameters.
#input:
#   Initial value to use when editing - evaluated as a template.
#   Result must be float.
#input_min:
#   Minimum value of range - evaluated as a template. Default -99999.
#input_max:
#   Maximum value of range - evaluated as a template. Default 99999.
#input_step:
#   Editing step - Must be a positive integer or float value. It has
#   internal fast rate step. When "(input_max - input_min) /
#   input_step > 100" then fast rate step is 10 * input_step else fast
#   rate step is same input_step.
#realtime:
#   This attribute accepts static boolean value. When enabled then
#   gcode script is run after each value change. The default is False.
#gcode:
#   Script to run on button click, long click or value change.
#   Evaluated as a template. The button click will trigger the edit
#   mode start or end.
#####################################################################
#       Disable items from stock- uncomment to disable
#####################################################################

[menu __main __octoprint]
type: disabled
#[menu __main __temp]
#type:disabled
#[menu __main __temp __preheat_pla]
#type: disabled
#[menu __main __temp __preheat_abs]
#type: disabled
#[menu __main __filament __loadf]
#type: disabled
#[menu __main __filament __loads]
#type: disabled
#[menu __main __filament __unloadf]
#type: disabled
#[menu __main __filament __unloads]
#type: disabled
#[menu __main __filament __feed]
#type: disabled
#[menu __main __filament __loadf]
#type: disabled
#[menu __main __filament __hotend0_target]
#type: disabled
#[menu __main __temp __cooldown]
#type: disabled
[menu __main __setup __calib __delta_calib_auto]
type: disabled
[menu __main __setup __calib __delta_calib_man]
type: disabled
#[menu __main __control __move_10mm]
#type: disabled
#[menu __main __control __move_01mm]
#type: disabled
#[menu __main __setup __calib __bedprobe]
#type: disabled
#[menu __main __setup __dump]
#type: disabled
#[menu __main __control __fanonoff]
#type: disabled
#[menu __main __setup __calib]
#type: disabled